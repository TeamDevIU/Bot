language: generic

stages:
  - name: test_vkbot
    if: branch = development
  - name: test_tgbot
    if: branch = development
  - name: test_mainserver
    if: branch = development
  - name: deploy
    if: branch = development

jobs:
  include:
    - stage: test_vkbot
      language: node_js
      node_js: 
          - "node"
      before_script:
      script: 
          - cd VkGroupBot;
          - npm install;
          - npm test;
          - grunt jshint;
          - cd ..;

    - stage: test_tgbot
      language: python
      before_script:
          - sudo add-apt-repository -y ppa:jonathonf/python-3.6
          - sudo apt-get update
          - sudo apt-get install python3.6 libpython3.6
          - wget https://bootstrap.pypa.io/get-pip.py
          - sudo python3.6 get-pip.py
          - cd TgBot
          - echo "DIALOG_FLOW_TOKEN = \"$DIALOG_FLOW_TOKEN\"" > config.py
          - sudo pip3.6 install -r requirements.txt 
          - cd ..
      script: 
          - cd TgBot
          - python3.6 -m unittest tests/*.py
          - cd ..

    - stage: test_mainserver
      services:
          - postgresql
      addons:
          postgresql: "9.6"
      before_script:
          - psql -c 'create database db_for_test;' -U postgres
          - psql -c "create user test_user with password 'password';" -U postgres
          - psql -c "GRANT ALL ON DATABASE db_for_test TO test_user;" -U postgres
          - wget https://storage.googleapis.com/golang/go1.9.3.linux-amd64.tar.gz
          - sudo tar -zxvf  go1.9.3.linux-amd64.tar.gz -C /usr/local/
          - export PATH=$PATH:/usr/local/go/bin
          - export GOPATH=$HOME
          - go version
          - cd main-server
          - go get github.com/gorilla/mux
          - go get github.com/lib/pq
          - cd ..
      script: 
          - cd main-server
          - go test
          - cd ..
    - stage: deploy
      addons:
        ssh_known_hosts: 13.95.158.175

      before_script:
          - openssl aes-256-cbc -K $encrypted_<...>_key -iv $encrypted_<...>_iv -in ./.travis/deploy_rsa.enc -out /tmp/deploy_rsa -d
          - eval "$(ssh-agent -s)"
          - chmod 600 /tmp/deploy_rsa
          - ssh-add /tmp/deploy_rsa
      script: 
          - cd Bot;
          - git pull;
          - rm TgBot/config.py;
          - echo "SERVER_HOST=\"http://$PRIVATE_HOST:8080\"\n /
            WEBHOOK_HOST=\"$SERVER_DNS/tg\"\n /
            API_TOKEN=\"$API_TOKEN\"\n /
            DIALOG_FLOW_TOKEN=\"$DIALOG_FLOW_TOKEN\"\n /
            WEBHOOK_LISTEN=\"0.0.0.0\"\n  /
            WEBHOOK_PORT=\"8002\"\n /
            YANDEX_SPEECH_TOKEN=\"$YANDEX_SPEECH_TOKEN\"" > TgBot/config.py;
          - rm VkGroupBot/config.json;
          - echo "{\"YANDEX_DEV_KEY\":\"$YANDEX_SPEECH_TOKEN\",\n /
             \"VKTOKEN\":\"$VK_TOKEN\",\n /
             \"DIALOGFLOW_CLIENT_ID\":\"$DIALOG_FLOW_TOKEN\",\n /
             \"PORT_BOT\":8000 \n, /
             \"URL\":\"https://$PUBLIC_HOST/vk/callback\",\n /
             \"MAINSERVER_URL\":\"$PRIVATE_HOST:8080\",\n /
             \"WORKER\":2"}" > VkGroupBot/config.json;
          - rm main-server run.sh;
          - echo "go get github.com/gorilla/mux \n /
            go get github.com/lib/pq  \n /
            go build \n /
            ./go -dbuser=$PG_USER -dbpass=$PG_PASSWORD -dbname=botdb -tgbot=$PRIVATE_HOST:8002 -vkbot=$PUBLIC_HOST:8000 -port=8080"
          - sudo docker-compose build --no-cache;
          - sudo docker-compose up
      

